{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Munging the Titanic Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recap of the need\n",
    "\n",
    "During our exploration of the Titanic data, we found a few problems that need to be solved before the data is ready for analytics.\n",
    "\n",
    "- About 31% (277 out of 891) of the values in `Age` are missing. Age seemed to play an important role, we need to estimate this in some way.\n",
    "- While looking at the distributions, we saw that `Fare` seemed to contain extreme values at either end. A few tickets were probably provided free or there may be data entry errors. On the other hand \"512\" sounds like a very high fare for booking a ticket.\n",
    "- We should also look at the non-numerical fields like `Ticket` and `Cabin` to see if they contain any useful information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked\r",
      "\r\n",
      "1,0,3,\"Braund, Mr. Owen Harris\",male,22,1,0,A/5 21171,7.25,,S\r",
      "\r\n",
      "2,1,1,\"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\",female,38,1,0,PC 17599,71.2833,C85,C\r",
      "\r\n",
      "3,1,3,\"Heikkinen, Miss. Laina\",female,26,0,0,STON/O2. 3101282,7.925,,S\r",
      "\r\n",
      "4,1,1,\"Futrelle, Mrs. Jacques Heath (Lily May Peel)\",female,35,1,0,113803,53.1,C123,S\r",
      "\r\n",
      "5,0,3,\"Allen, Mr. William Henry\",male,35,0,0,373450,8.05,,S\r",
      "\r\n",
      "6,0,3,\"Moran, Mr. James\",male,,0,0,330877,8.4583,,Q\r",
      "\r\n",
      "7,0,1,\"McCarthy, Mr. Timothy J\",male,54,0,0,17463,51.8625,E46,S\r",
      "\r\n",
      "8,0,3,\"Palsson, Master. Gosta Leonard\",male,2,3,1,349909,21.075,,S\r",
      "\r\n",
      "9,1,3,\"Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\",female,27,0,2,347742,11.1333,,S\r",
      "\r\n"
     ]
    }
   ],
   "source": [
    "! head train.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"train.csv\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quick checks:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "687"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum (df['Cabin'].isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    891\n",
       "Survived       891\n",
       "Pclass         891\n",
       "Name           891\n",
       "Sex            891\n",
       "Age            714\n",
       "SibSp          891\n",
       "Parch          891\n",
       "Ticket         891\n",
       "Fare           891\n",
       "Cabin          204\n",
       "Embarked       889\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check missing values\n",
    "\n",
    "`Age` feature has just 714 values that aren't missing. `Cabin` is much worse. \n",
    "\n",
    "Let's work on `Cabin` first. A first glance at the variable leaves us with an impression that there are too many NaNs in the dataset. So, let us check the number of nulls / NaNs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`isnull()` returns 1, if the value is null. 687 is a lot of missing values. We'll drop `Cabin`.\n",
    "\n",
    "Let's look at `Ticket`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['A/5 21171', 'PC 17599', 'STON/O2. 3101282', '113803', '373450',\n",
       "       '330877', '17463', '349909', '347742', '237736', 'PP 9549',\n",
       "       '113783', 'A/5. 2151', '347082', '350406', '248706', '382652',\n",
       "       '244373', '345763', '2649', '239865', '248698', '330923', '113788',\n",
       "       '347077', '2631', '19950', '330959', '349216', 'PC 17601',\n",
       "       'PC 17569', '335677', 'C.A. 24579', 'PC 17604', '113789', '2677',\n",
       "       'A./5. 2152', '345764', '2651', '7546', '11668', '349253',\n",
       "       'SC/Paris 2123', '330958', 'S.C./A.4. 23567', '370371', '14311',\n",
       "       '2662', '349237', '3101295', 'A/4. 39886', 'PC 17572', '2926',\n",
       "       '113509', '19947', 'C.A. 31026', '2697', 'C.A. 34651', 'CA 2144',\n",
       "       '2669', '113572', '36973', '347088', 'PC 17605', '2661',\n",
       "       'C.A. 29395', 'S.P. 3464', '3101281', '315151', 'C.A. 33111',\n",
       "       'S.O.C. 14879', '2680', '1601', '348123', '349208', '374746',\n",
       "       '248738', '364516', '345767', '345779', '330932', '113059',\n",
       "       'SO/C 14885', '3101278', 'W./C. 6608', 'SOTON/OQ 392086', '343275',\n",
       "       '343276', '347466', 'W.E.P. 5734', 'C.A. 2315', '364500', '374910',\n",
       "       'PC 17754', 'PC 17759', '231919', '244367', '349245', '349215',\n",
       "       '35281', '7540', '3101276', '349207', '343120', '312991', '349249',\n",
       "       '371110', '110465', '2665', '324669', '4136', '2627',\n",
       "       'STON/O 2. 3101294', '370369', 'PC 17558', 'A4. 54510', '27267',\n",
       "       '370372', 'C 17369', '2668', '347061', '349241',\n",
       "       'SOTON/O.Q. 3101307', 'A/5. 3337', '228414', 'C.A. 29178',\n",
       "       'SC/PARIS 2133', '11752', '7534', 'PC 17593', '2678', '347081',\n",
       "       'STON/O2. 3101279', '365222', '231945', 'C.A. 33112', '350043',\n",
       "       '230080', '244310', 'S.O.P. 1166', '113776', 'A.5. 11206',\n",
       "       'A/5. 851', 'Fa 265302', 'PC 17597', '35851', 'SOTON/OQ 392090',\n",
       "       '315037', 'CA. 2343', '371362', 'C.A. 33595', '347068', '315093',\n",
       "       '363291', '113505', 'PC 17318', '111240', 'STON/O 2. 3101280',\n",
       "       '17764', '350404', '4133', 'PC 17595', '250653', 'LINE',\n",
       "       'SC/PARIS 2131', '230136', '315153', '113767', '370365', '111428',\n",
       "       '364849', '349247', '234604', '28424', '350046', 'PC 17610',\n",
       "       '368703', '4579', '370370', '248747', '345770', '3101264', '2628',\n",
       "       'A/5 3540', '347054', '2699', '367231', '112277',\n",
       "       'SOTON/O.Q. 3101311', 'F.C.C. 13528', 'A/5 21174', '250646',\n",
       "       '367229', '35273', 'STON/O2. 3101283', '243847', '11813',\n",
       "       'W/C 14208', 'SOTON/OQ 392089', '220367', '21440', '349234',\n",
       "       '19943', 'PP 4348', 'SW/PP 751', 'A/5 21173', '236171', '347067',\n",
       "       '237442', 'C.A. 29566', 'W./C. 6609', '26707', 'C.A. 31921',\n",
       "       '28665', 'SCO/W 1585', '367230', 'W./C. 14263', 'STON/O 2. 3101275',\n",
       "       '2694', '19928', '347071', '250649', '11751', '244252', '362316',\n",
       "       '113514', 'A/5. 3336', '370129', '2650', 'PC 17585', '110152',\n",
       "       'PC 17755', '230433', '384461', '110413', '112059', '382649',\n",
       "       'C.A. 17248', '347083', 'PC 17582', 'PC 17760', '113798', '250644',\n",
       "       'PC 17596', '370375', '13502', '347073', '239853', 'C.A. 2673',\n",
       "       '336439', '347464', '345778', 'A/5. 10482', '113056', '349239',\n",
       "       '345774', '349206', '237798', '370373', '19877', '11967',\n",
       "       'SC/Paris 2163', '349236', '349233', 'PC 17612', '2693', '113781',\n",
       "       '19988', '9234', '367226', '226593', 'A/5 2466', '17421',\n",
       "       'PC 17758', 'P/PP 3381', 'PC 17485', '11767', 'PC 17608', '250651',\n",
       "       '349243', 'F.C.C. 13529', '347470', '29011', '36928', '16966',\n",
       "       'A/5 21172', '349219', '234818', '345364', '28551', '111361',\n",
       "       '113043', 'PC 17611', '349225', '7598', '113784', '248740',\n",
       "       '244361', '229236', '248733', '31418', '386525', 'C.A. 37671',\n",
       "       '315088', '7267', '113510', '2695', '2647', '345783', '237671',\n",
       "       '330931', '330980', 'SC/PARIS 2167', '2691', 'SOTON/O.Q. 3101310',\n",
       "       'C 7076', '110813', '2626', '14313', 'PC 17477', '11765', '3101267',\n",
       "       '323951', 'C 7077', '113503', '2648', '347069', 'PC 17757', '2653',\n",
       "       'STON/O 2. 3101293', '349227', '27849', '367655', 'SC 1748',\n",
       "       '113760', '350034', '3101277', '350052', '350407', '28403',\n",
       "       '244278', '240929', 'STON/O 2. 3101289', '341826', '4137', '315096',\n",
       "       '28664', '347064', '29106', '312992', '349222', '394140',\n",
       "       'STON/O 2. 3101269', '343095', '28220', '250652', '28228', '345773',\n",
       "       '349254', 'A/5. 13032', '315082', '347080', 'A/4. 34244', '2003',\n",
       "       '250655', '364851', 'SOTON/O.Q. 392078', '110564', '376564',\n",
       "       'SC/AH 3085', 'STON/O 2. 3101274', '13507', 'C.A. 18723', '345769',\n",
       "       '347076', '230434', '65306', '33638', '113794', '2666', '113786',\n",
       "       '65303', '113051', '17453', 'A/5 2817', '349240', '13509', '17464',\n",
       "       'F.C.C. 13531', '371060', '19952', '364506', '111320', '234360',\n",
       "       'A/S 2816', 'SOTON/O.Q. 3101306', '113792', '36209', '323592',\n",
       "       '315089', 'SC/AH Basle 541', '7553', '31027', '3460', '350060',\n",
       "       '3101298', '239854', 'A/5 3594', '4134', '11771', 'A.5. 18509',\n",
       "       '65304', 'SOTON/OQ 3101317', '113787', 'PC 17609', 'A/4 45380',\n",
       "       '36947', 'C.A. 6212', '350035', '315086', '364846', '330909',\n",
       "       '4135', '26360', '111427', 'C 4001', '382651', 'SOTON/OQ 3101316',\n",
       "       'PC 17473', 'PC 17603', '349209', '36967', 'C.A. 34260', '226875',\n",
       "       '349242', '12749', '349252', '2624', '2700', '367232',\n",
       "       'W./C. 14258', 'PC 17483', '3101296', '29104', '2641', '2690',\n",
       "       '315084', '113050', 'PC 17761', '364498', '13568', 'WE/P 5735',\n",
       "       '2908', '693', 'SC/PARIS 2146', '244358', '330979', '2620',\n",
       "       '347085', '113807', '11755', '345572', '372622', '349251', '218629',\n",
       "       'SOTON/OQ 392082', 'SOTON/O.Q. 392087', 'A/4 48871', '349205',\n",
       "       '2686', '350417', 'S.W./PP 752', '11769', 'PC 17474', '14312',\n",
       "       'A/4. 20589', '358585', '243880', '2689', 'STON/O 2. 3101286',\n",
       "       '237789', '13049', '3411', '237565', '13567', '14973', 'A./5. 3235',\n",
       "       'STON/O 2. 3101273', 'A/5 3902', '364848', 'SC/AH 29037', '248727',\n",
       "       '2664', '349214', '113796', '364511', '111426', '349910', '349246',\n",
       "       '113804', 'SOTON/O.Q. 3101305', '370377', '364512', '220845',\n",
       "       '31028', '2659', '11753', '350029', '54636', '36963', '219533',\n",
       "       '349224', '334912', '27042', '347743', '13214', '112052', '237668',\n",
       "       'STON/O 2. 3101292', '350050', '349231', '13213', 'S.O./P.P. 751',\n",
       "       'CA. 2314', '349221', '8475', '330919', '365226', '349223', '29751',\n",
       "       '2623', '5727', '349210', 'STON/O 2. 3101285', '234686', '312993',\n",
       "       'A/5 3536', '19996', '29750', 'F.C. 12750', 'C.A. 24580', '244270',\n",
       "       '239856', '349912', '342826', '4138', '330935', '6563', '349228',\n",
       "       '350036', '24160', '17474', '349256', '2672', '113800', '248731',\n",
       "       '363592', '35852', '348121', 'PC 17475', '36864', '350025',\n",
       "       '223596', 'PC 17476', 'PC 17482', '113028', '7545', '250647',\n",
       "       '348124', '34218', '36568', '347062', '350048', '12233', '250643',\n",
       "       '113806', '315094', '36866', '236853', 'STON/O2. 3101271', '239855',\n",
       "       '28425', '233639', '349201', '349218', '16988', '376566',\n",
       "       'STON/O 2. 3101288', '250648', '113773', '335097', '29103',\n",
       "       '392096', '345780', '349204', '350042', '29108', '363294',\n",
       "       'SOTON/O2 3101272', '2663', '347074', '112379', '364850', '8471',\n",
       "       '345781', '350047', 'S.O./P.P. 3', '2674', '29105', '347078',\n",
       "       '383121', '36865', '2687', '113501', 'W./C. 6607',\n",
       "       'SOTON/O.Q. 3101312', '374887', '3101265', '12460', 'PC 17600',\n",
       "       '349203', '28213', '17465', '349244', '2685', '2625', '347089',\n",
       "       '347063', '112050', '347087', '248723', '3474', '28206', '364499',\n",
       "       '112058', 'STON/O2. 3101290', 'S.C./PARIS 2079', 'C 7075', '315098',\n",
       "       '19972', '368323', '367228', '2671', '347468', '2223', 'PC 17756',\n",
       "       '315097', '392092', '11774', 'SOTON/O2 3101287', '2683', '315090',\n",
       "       'C.A. 5547', '349213', '347060', 'PC 17592', '392091', '113055',\n",
       "       '2629', '350026', '28134', '17466', '233866', '236852',\n",
       "       'SC/PARIS 2149', 'PC 17590', '345777', '349248', '695', '345765',\n",
       "       '2667', '349212', '349217', '349257', '7552', 'C.A./SOTON 34068',\n",
       "       'SOTON/OQ 392076', '211536', '112053', '111369', '370376'], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Ticket.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Ticket` has a mix of numbers and text and doesn’t seem to contain any information, so will drop `Ticket` as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = df.drop(['Ticket','Cabin'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch     Fare Embarked  \n",
       "0      0   7.2500        S  \n",
       "1      0  71.2833        C  \n",
       "2      0   7.9250        S  \n",
       "3      0  53.1000        S  \n",
       "4      0   8.0500        S  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How should we handle missing values for `Age`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a lot of possible ways to fill the missing values for `Age`.\n",
    "\n",
    "One possibility is to drop any missing values. The downside is that we reduce the total number of rows for *all* variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "temp = df[pd.notnull(df['Age'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 714 entries, 0 to 890\n",
      "Data columns (total 10 columns):\n",
      "PassengerId    714 non-null int64\n",
      "Survived       714 non-null int64\n",
      "Pclass         714 non-null int64\n",
      "Name           714 non-null object\n",
      "Sex            714 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          714 non-null int64\n",
      "Parch          714 non-null int64\n",
      "Fare           714 non-null float64\n",
      "Embarked       712 non-null object\n",
      "dtypes: float64(2), int64(5), object(3)\n",
      "memory usage: 61.4+ KB\n"
     ]
    }
   ],
   "source": [
    "temp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The other extreme could be to build a supervised learning model to predict a`Age` on the basis of other variables and then use `Age` along with other variables to predict survival."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another simple strategy is to fill the missing values for `Age` with the mean or median. That preserves all of the information for the other variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 10 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            891 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Fare           891 non-null float64\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(3)\n",
      "memory usage: 69.7+ KB\n"
     ]
    }
   ],
   "source": [
    "meanAge = df.Age.mean()\n",
    "temp = df.copy()\n",
    "temp.Age = temp.Age.fillna(meanAge)\n",
    "temp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A better way to experiment with imputing missing data is to create a new column for each strategy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeFillMean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>22.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>38.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>26.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>Q</td>\n",
       "      <td>29.699118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>S</td>\n",
       "      <td>54.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>S</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>S</td>\n",
       "      <td>27.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>C</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch     Fare Embarked  AgeFillMean  \n",
       "0      0   7.2500        S    22.000000  \n",
       "1      0  71.2833        C    38.000000  \n",
       "2      0   7.9250        S    26.000000  \n",
       "3      0  53.1000        S    35.000000  \n",
       "4      0   8.0500        S    35.000000  \n",
       "5      0   8.4583        Q    29.699118  \n",
       "6      0  51.8625        S    54.000000  \n",
       "7      1  21.0750        S     2.000000  \n",
       "8      2  11.1333        S    27.000000  \n",
       "9      0  30.0708        C    14.000000  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meanAge = df.Age.mean()\n",
    "df['AgeFillMean'] = df.Age.fillna(meanAge)\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeFillMean</th>\n",
       "      <th>AgeFillMedian</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>Q</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>S</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>S</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>S</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>C</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch     Fare Embarked  AgeFillMean  AgeFillMedian  \n",
       "0      0   7.2500        S    22.000000           22.0  \n",
       "1      0  71.2833        C    38.000000           38.0  \n",
       "2      0   7.9250        S    26.000000           26.0  \n",
       "3      0  53.1000        S    35.000000           35.0  \n",
       "4      0   8.0500        S    35.000000           35.0  \n",
       "5      0   8.4583        Q    29.699118           28.0  \n",
       "6      0  51.8625        S    54.000000           54.0  \n",
       "7      1  21.0750        S     2.000000            2.0  \n",
       "8      2  11.1333        S    27.000000           27.0  \n",
       "9      0  30.0708        C    14.000000           14.0  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medianAge = df.Age.median()\n",
    "df['AgeFillMedian'] = df.Age.fillna(medianAge)\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simple model for missing values for `Age`\n",
    "\n",
    "Suppose that we want to use the age that was typical in each passenger class and decide that the median might be better. Let's build another reference table to calculate each of these medians ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.,  0.,  0.],\n",
       "       [ 0.,  0.,  0.]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "median_ages = np.zeros((2,3))\n",
    "median_ages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "... and then populate the array.\n",
    "\n",
    "First, we'll create a binary variable for Gender. We'll map 'female' to 0 and map 'male' to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeFillMean</th>\n",
       "      <th>AgeFillMedian</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>22.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>38.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>26.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>35.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>35.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch     Fare Embarked  AgeFillMean  AgeFillMedian  Gender  \n",
       "0      0   7.2500        S         22.0           22.0       1  \n",
       "1      0  71.2833        C         38.0           38.0       0  \n",
       "2      0   7.9250        S         26.0           26.0       0  \n",
       "3      0  53.1000        S         35.0           35.0       0  \n",
       "4      0   8.0500        S         35.0           35.0       1  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'] = df['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 35. ,  28. ,  21.5],\n",
       "       [ 40. ,  30. ,  25. ]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(0, 2):\n",
    "    for j in range(0, 3):\n",
    "        median_ages[i,j] = df[(df['Gender'] == i) & \\\n",
    "                              (df['Pclass'] == j+1)]['Age'].dropna().median()\n",
    " \n",
    "median_ages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, we'll create a new column for this strategy for imputing missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeFillMean</th>\n",
       "      <th>AgeFillMedian</th>\n",
       "      <th>Gender</th>\n",
       "      <th>AgeFill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>Q</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>S</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>S</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>S</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>C</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch     Fare Embarked  AgeFillMean  AgeFillMedian  Gender  AgeFill  \n",
       "0      0   7.2500        S    22.000000           22.0       1     22.0  \n",
       "1      0  71.2833        C    38.000000           38.0       0     38.0  \n",
       "2      0   7.9250        S    26.000000           26.0       0     26.0  \n",
       "3      0  53.1000        S    35.000000           35.0       0     35.0  \n",
       "4      0   8.0500        S    35.000000           35.0       1     35.0  \n",
       "5      0   8.4583        Q    29.699118           28.0       1      NaN  \n",
       "6      0  51.8625        S    54.000000           54.0       1     54.0  \n",
       "7      1  21.0750        S     2.000000            2.0       1      2.0  \n",
       "8      2  11.1333        S    27.000000           27.0       0     27.0  \n",
       "9      0  30.0708        C    14.000000           14.0       0     14.0  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['AgeFill'] = df['Age']\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take a look at just the rows with missing values, and limit it to the columns important to us right now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>AgeFill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Gender  Pclass  Age  AgeFill\n",
       "5        1       3  NaN      NaN\n",
       "17       1       2  NaN      NaN\n",
       "19       0       3  NaN      NaN\n",
       "26       1       3  NaN      NaN\n",
       "28       0       3  NaN      NaN\n",
       "29       1       3  NaN      NaN\n",
       "31       0       1  NaN      NaN\n",
       "32       0       3  NaN      NaN\n",
       "36       1       3  NaN      NaN\n",
       "42       1       3  NaN      NaN"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Age'].isnull()][['Gender','Pclass','Age','AgeFill']].head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use some code to fill in `AgeFill` based on our median_ages table. Here we happen to use the alternate syntax for referring to an existing column, like `df.Age` rather than `df['Age']`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in range(0, 2):\n",
    "    for j in range(0, 3):\n",
    "        df.loc[ (df.Age.isnull()) & (df.Gender == i) & (df.Pclass == j+1),\\\n",
    "                'AgeFill'] = median_ages[i,j]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at the same ten rows we just viewed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>AgeFill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Gender  Pclass  Age  AgeFill\n",
       "5        1       3  NaN     25.0\n",
       "17       1       2  NaN     30.0\n",
       "19       0       3  NaN     21.5\n",
       "26       1       3  NaN     25.0\n",
       "28       0       3  NaN     21.5\n",
       "29       1       3  NaN     25.0\n",
       "31       0       1  NaN     35.0\n",
       "32       0       3  NaN     21.5\n",
       "36       1       3  NaN     25.0\n",
       "42       1       3  NaN     25.0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[ df['Age'].isnull() ][['Gender','Pclass','Age','AgeFill']].head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This confirms we accomplished exactly what we wanted.\n",
    "\n",
    "Let's also create a feature that records whether `Age` was originally missing. This is relatively simple by allowing pandas to use the integer conversion of the True/False evaluation of its built-in function, `pandas.isnull()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeFillMean</th>\n",
       "      <th>AgeFillMedian</th>\n",
       "      <th>Gender</th>\n",
       "      <th>AgeFill</th>\n",
       "      <th>AgeIsNull</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>Q</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>S</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>S</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>S</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>C</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "5            6         0       3   \n",
       "6            7         0       1   \n",
       "7            8         0       3   \n",
       "8            9         1       3   \n",
       "9           10         1       2   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "5                                   Moran, Mr. James    male   NaN      0   \n",
       "6                            McCarthy, Mr. Timothy J    male  54.0      0   \n",
       "7                     Palsson, Master. Gosta Leonard    male   2.0      3   \n",
       "8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n",
       "9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n",
       "\n",
       "   Parch     Fare Embarked  AgeFillMean  AgeFillMedian  Gender  AgeFill  \\\n",
       "0      0   7.2500        S    22.000000           22.0       1     22.0   \n",
       "1      0  71.2833        C    38.000000           38.0       0     38.0   \n",
       "2      0   7.9250        S    26.000000           26.0       0     26.0   \n",
       "3      0  53.1000        S    35.000000           35.0       0     35.0   \n",
       "4      0   8.0500        S    35.000000           35.0       1     35.0   \n",
       "5      0   8.4583        Q    29.699118           28.0       1     25.0   \n",
       "6      0  51.8625        S    54.000000           54.0       1     54.0   \n",
       "7      1  21.0750        S     2.000000            2.0       1      2.0   \n",
       "8      2  11.1333        S    27.000000           27.0       0     27.0   \n",
       "9      0  30.0708        C    14.000000           14.0       0     14.0   \n",
       "\n",
       "   AgeIsNull  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  \n",
       "5          1  \n",
       "6          0  \n",
       "7          0  \n",
       "8          0  \n",
       "9          0  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['AgeIsNull'] = pd.isnull(df.Age).astype(int)\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/liran/anaconda/lib/python2.7/site-packages/numpy/lib/function_base.py:3834: RuntimeWarning: Invalid value encountered in percentile\n",
      "  RuntimeWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Gender</th>\n",
       "      <th>AgeFill</th>\n",
       "      <th>AgeIsNull</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>0.647587</td>\n",
       "      <td>29.112424</td>\n",
       "      <td>0.198653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>0.477990</td>\n",
       "      <td>13.304424</td>\n",
       "      <td>0.399210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age        Fare      Gender     AgeFill  \\\n",
       "count  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000   \n",
       "mean     0.383838    2.308642   29.699118   32.204208    0.647587   29.112424   \n",
       "std      0.486592    0.836071   14.526497   49.693429    0.477990   13.304424   \n",
       "min      0.000000    1.000000    0.420000    0.000000    0.000000    0.420000   \n",
       "25%      0.000000    2.000000         NaN    7.910400    0.000000   21.500000   \n",
       "50%      0.000000    3.000000         NaN   14.454200    1.000000   26.000000   \n",
       "75%      1.000000    3.000000         NaN   31.000000    1.000000   36.000000   \n",
       "max      1.000000    3.000000   80.000000  512.329200    1.000000   80.000000   \n",
       "\n",
       "        AgeIsNull  \n",
       "count  891.000000  \n",
       "mean     0.198653  \n",
       "std      0.399210  \n",
       "min      0.000000  \n",
       "25%      0.000000  \n",
       "50%      0.000000  \n",
       "75%      0.000000  \n",
       "max      1.000000  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['Survived', 'Pclass', 'Age', 'Fare', 'Gender', 'AgeFill', 'AgeIsNull']].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Awesome! We now have a dataset that is almost ready for further analytics.\n",
    "\n",
    "The next step is to drop the columns which we would not use:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = df.drop(['Name', 'Sex', 'Embarked'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also drop `Age`, since we copied and filled that to a better column `AgeFill`. The original `Age` still has the missing values which won't work well in our future model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = df.drop(['Age'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An alternate way is to drop any rows which still have missing values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>AgeFillMean</th>\n",
       "      <th>AgeFillMedian</th>\n",
       "      <th>Gender</th>\n",
       "      <th>AgeFill</th>\n",
       "      <th>AgeIsNull</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>54.0</td>\n",
       "      <td>1</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  SibSp  Parch     Fare  AgeFillMean  \\\n",
       "0            1         0       3      1      0   7.2500    22.000000   \n",
       "1            2         1       1      1      0  71.2833    38.000000   \n",
       "2            3         1       3      0      0   7.9250    26.000000   \n",
       "3            4         1       1      1      0  53.1000    35.000000   \n",
       "4            5         0       3      0      0   8.0500    35.000000   \n",
       "5            6         0       3      0      0   8.4583    29.699118   \n",
       "6            7         0       1      0      0  51.8625    54.000000   \n",
       "7            8         0       3      3      1  21.0750     2.000000   \n",
       "8            9         1       3      0      2  11.1333    27.000000   \n",
       "9           10         1       2      1      0  30.0708    14.000000   \n",
       "\n",
       "   AgeFillMedian  Gender  AgeFill  AgeIsNull  \n",
       "0           22.0       1     22.0          0  \n",
       "1           38.0       0     38.0          0  \n",
       "2           26.0       0     26.0          0  \n",
       "3           35.0       0     35.0          0  \n",
       "4           35.0       1     35.0          0  \n",
       "5           28.0       1     25.0          1  \n",
       "6           54.0       1     54.0          0  \n",
       "7            2.0       1      2.0          0  \n",
       "8           27.0       0     27.0          0  \n",
       "9           14.0       0     14.0          0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ... about those questionable values of `Fare` ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11489d1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Fare.hist(bins =50, color=\"red\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's replace the unusually high fare with the median."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/liran/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    }
   ],
   "source": [
    "#ignore the warning here\n",
    "df.Fare[df.Fare > 300] = df.Fare.median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAwtKTrdPT0u7AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114badd10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Fare.hist(bins = 50);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The minimum fare is zero. Let's see if those might all be babies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgeFill</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>36.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271</th>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>19.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>378</th>\n",
       "      <td>20.0</td>\n",
       "      <td>4.0125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>481</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>49.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>633</th>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>674</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>732</th>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806</th>\n",
       "      <td>39.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>815</th>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>38.0</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     AgeFill    Fare\n",
       "179     36.0  0.0000\n",
       "263     40.0  0.0000\n",
       "271     25.0  0.0000\n",
       "277     30.0  0.0000\n",
       "302     19.0  0.0000\n",
       "378     20.0  4.0125\n",
       "413     30.0  0.0000\n",
       "466     30.0  0.0000\n",
       "481     30.0  0.0000\n",
       "597     49.0  0.0000\n",
       "633     40.0  0.0000\n",
       "674     30.0  0.0000\n",
       "732     30.0  0.0000\n",
       "806     39.0  0.0000\n",
       "815     40.0  0.0000\n",
       "822     38.0  0.0000"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['AgeFill','Fare']][df.Fare<5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that there is a jump from a fare of 0 to 4, so there is something going on here. Most likely, these are errors, so let’s replace them by the median fare for their class, and do the same for null values.\n",
    "\n",
    "First we set those fares of 0 to NaN:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# lambda just means a function we create on the fly\n",
    "df.Fare = df.Fare.map(lambda x: np.nan if x==0 else x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate class medians"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass\n",
       "1    59.4000\n",
       "2    15.0229\n",
       "3     8.0500\n",
       "Name: Fare, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_medians = df.pivot_table('Fare', index='Pclass', aggfunc='median')\n",
    "class_medians"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`apply` acts on dataframes, either row-wise or column-wise, `axis=1` means columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.Fare = df[['Fare', 'Pclass']].apply(lambda x: class_medians[x['Pclass']] if pd.isnull(x['Fare']) else x['Fare'], axis=1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114acc490>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Fare.hist(bins = 50);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>AgeFillMean</th>\n",
       "      <th>AgeFillMedian</th>\n",
       "      <th>Gender</th>\n",
       "      <th>AgeFill</th>\n",
       "      <th>AgeIsNull</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>30.998498</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>29.361582</td>\n",
       "      <td>0.647587</td>\n",
       "      <td>29.112424</td>\n",
       "      <td>0.198653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>41.028011</td>\n",
       "      <td>13.002015</td>\n",
       "      <td>13.019697</td>\n",
       "      <td>0.477990</td>\n",
       "      <td>13.304424</td>\n",
       "      <td>0.399210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.012500</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.925000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.500000</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.275000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>263.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass       SibSp       Parch  \\\n",
       "count   891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642    0.523008    0.381594   \n",
       "std     257.353842    0.486592    0.836071    1.102743    0.806057   \n",
       "min       1.000000    0.000000    1.000000    0.000000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000    0.000000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000    0.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000    1.000000    0.000000   \n",
       "max     891.000000    1.000000    3.000000    8.000000    6.000000   \n",
       "\n",
       "             Fare  AgeFillMean  AgeFillMedian      Gender     AgeFill  \\\n",
       "count  891.000000   891.000000     891.000000  891.000000  891.000000   \n",
       "mean    30.998498    29.699118      29.361582    0.647587   29.112424   \n",
       "std     41.028011    13.002015      13.019697    0.477990   13.304424   \n",
       "min      4.012500     0.420000       0.420000    0.000000    0.420000   \n",
       "25%      7.925000    22.000000      22.000000    0.000000   21.500000   \n",
       "50%     14.500000    29.699118      28.000000    1.000000   26.000000   \n",
       "75%     31.275000    35.000000      35.000000    1.000000   36.000000   \n",
       "max    263.000000    80.000000      80.000000    1.000000   80.000000   \n",
       "\n",
       "        AgeIsNull  \n",
       "count  891.000000  \n",
       "mean     0.198653  \n",
       "std      0.399210  \n",
       "min      0.000000  \n",
       "25%      0.000000  \n",
       "50%      0.000000  \n",
       "75%      0.000000  \n",
       "max      1.000000  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Now** we have a clean and tidy dataset that is ready for analytics!"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
